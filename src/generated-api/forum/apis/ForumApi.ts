/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

import {
  ForumCreateMessageDTO,
  ForumCreateMessageDTOToJSON,
  ForumCreateThreadDTO,
  ForumCreateThreadDTOToJSON,
  ForumEditMessageDTO,
  ForumEditMessageDTOToJSON,
  ForumEmoticonDto,
  ForumEmoticonDtoFromJSON,
  ForumForumUserDTO,
  ForumForumUserDTOFromJSON,
  ForumMessageDTO,
  ForumMessageDTOFromJSON,
  ForumMessagePageDTO,
  ForumMessagePageDTOFromJSON,
  ForumSortOrder,
  ForumThreadDTO,
  ForumThreadDTOFromJSON,
  ForumThreadPageDto,
  ForumThreadPageDtoFromJSON,
  ForumThreadType,
  ForumThreadTypeFromJSON,
  ForumThreadTypeToJSON,
  ForumUpdateMessageReactionDto,
  ForumUpdateMessageReactionDtoToJSON,
  ForumUpdateThreadDTO,
  ForumUpdateThreadDTOToJSON,
  ForumUpdateUserDTO,
  ForumUpdateUserDTOToJSON,
} from '../models';

export interface ForumControllerAllEmoticonsRequest {
    steamId?: string;
}

export interface ForumControllerDeleteMessageRequest {
    id: string;
}

export interface ForumControllerEditMessageRequest {
    id: string;
    forumEditMessageDTO: ForumEditMessageDTO;
}

export interface ForumControllerGetLatestPageRequest {
    id: string;
    perPage?: number;
}

export interface ForumControllerGetMessageRequest {
    id: string;
}

export interface ForumControllerGetThreadRequest {
    id: string;
}

export interface ForumControllerGetThreadForKeyRequest {
    forumCreateThreadDTO: ForumCreateThreadDTO;
}

export interface ForumControllerGetUserRequest {
    id: string;
}

export interface ForumControllerMessagesRequest {
    id: string;
    cursor?: string;
    limit?: number;
    order?: ForumSortOrder;
}

export interface ForumControllerMessagesPageRequest {
    id: string;
    page: number;
    cursor?: string;
    perPage?: number;
}

export interface ForumControllerPostMessageRequest {
    id: string;
    forumCreateMessageDTO: ForumCreateMessageDTO;
}

export interface ForumControllerThreadsRequest {
    page: number;
    steamId?: string;
    perPage?: number;
    threadType?: ForumThreadType;
}

export interface ForumControllerToggleReactionRequest {
    id: string;
    forumUpdateMessageReactionDto: ForumUpdateMessageReactionDto;
}

export interface ForumControllerUpdateThreadRequest {
    id: string;
    forumUpdateThreadDTO: ForumUpdateThreadDTO;
}

export interface ForumControllerUpdateUserRequest {
    id: string;
    forumUpdateUserDTO: ForumUpdateUserDTO;
}

/**
 *
 */
export class ForumApi extends runtime.BaseAPI {

    /**
     */
    forumControllerAllEmoticonsContext(requestParameters: ForumControllerAllEmoticonsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.steamId !== undefined) {
            queryParameters['steam_id'] = requestParameters.steamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/emoticons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerAllEmoticons = async (steamId?: string): Promise<Array<ForumEmoticonDto>> => {
        const response = await this.forumControllerAllEmoticonsRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    forumControllerDeleteMessageContext(requestParameters: ForumControllerDeleteMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/message/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerDeleteMessage = async (id: string): Promise<ForumMessageDTO> => {
        const response = await this.forumControllerDeleteMessageRaw({ id: id });
        return await response.value();
    }

    /**
     */
    forumControllerEditMessageContext(requestParameters: ForumControllerEditMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/forum/message/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ForumEditMessageDTOToJSON(requestParameters.forumEditMessageDTO),
        };
    }

    /**
     */
    forumControllerEditMessage = async (id: string, forumEditMessageDTO: ForumEditMessageDTO): Promise<ForumMessageDTO> => {
        const response = await this.forumControllerEditMessageRaw({ id: id, forumEditMessageDTO: forumEditMessageDTO });
        return await response.value();
    }

    /**
     */
    forumControllerGetLatestPageContext(requestParameters: ForumControllerGetLatestPageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/thread/{id}/latestPage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetLatestPage = async (id: string, perPage?: number): Promise<ForumMessagePageDTO> => {
        const response = await this.forumControllerGetLatestPageRaw({ id: id, perPage: perPage });
        return await response.value();
    }

    /**
     */
    forumControllerGetMessageContext(requestParameters: ForumControllerGetMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/message/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetMessage = async (id: string): Promise<ForumMessageDTO> => {
        const response = await this.forumControllerGetMessageRaw({ id: id });
        return await response.value();
    }

    /**
     */
    forumControllerGetThreadContext(requestParameters: ForumControllerGetThreadRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/thread/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetThread = async (id: string): Promise<ForumThreadDTO> => {
        const response = await this.forumControllerGetThreadRaw({ id: id });
        return await response.value();
    }

    /**
     */
    forumControllerGetThreadForKeyContext(requestParameters: ForumControllerGetThreadForKeyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        return {
            path: `/forum/thread`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForumCreateThreadDTOToJSON(requestParameters.forumCreateThreadDTO),
        };
    }

    /**
     */
    forumControllerGetThreadForKey = async (forumCreateThreadDTO: ForumCreateThreadDTO): Promise<ForumThreadDTO> => {
        const response = await this.forumControllerGetThreadForKeyRaw({ forumCreateThreadDTO: forumCreateThreadDTO });
        return await response.value();
    }

    /**
     */
    forumControllerGetUserContext(requestParameters: ForumControllerGetUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerGetUser = async (id: string): Promise<ForumForumUserDTO> => {
        const response = await this.forumControllerGetUserRaw({ id: id });
        return await response.value();
    }

    /**
     */
    forumControllerMessagesContext(requestParameters: ForumControllerMessagesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/thread/{id}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerMessages = async (id: string, cursor?: string, limit?: number, order?: ForumSortOrder): Promise<Array<ForumMessageDTO>> => {
        const response = await this.forumControllerMessagesRaw({ id: id, cursor: cursor, limit: limit, order: order });
        return await response.value();
    }

    /**
     */
    forumControllerMessagesPageContext(requestParameters: ForumControllerMessagesPageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/thread/{id}/page`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerMessagesPage = async (id: string, page: number, cursor?: string, perPage?: number): Promise<ForumMessagePageDTO> => {
        const response = await this.forumControllerMessagesPageRaw({ id: id, page: page, cursor: cursor, perPage: perPage });
        return await response.value();
    }

    /**
     */
    forumControllerPostMessageContext(requestParameters: ForumControllerPostMessageRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/forum/thread/{id}/message`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForumCreateMessageDTOToJSON(requestParameters.forumCreateMessageDTO),
        };
    }

    /**
     */
    forumControllerPostMessage = async (id: string, forumCreateMessageDTO: ForumCreateMessageDTO): Promise<ForumMessageDTO> => {
        const response = await this.forumControllerPostMessageRaw({ id: id, forumCreateMessageDTO: forumCreateMessageDTO });
        return await response.value();
    }

    /**
     */
    forumControllerThreadsContext(requestParameters: ForumControllerThreadsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.steamId !== undefined) {
            queryParameters['steamId'] = requestParameters.steamId;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.threadType !== undefined) {
            queryParameters['threadType'] = requestParameters.threadType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/forum/threads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    forumControllerThreads = async (page: number, steamId?: string, perPage?: number, threadType?: ForumThreadType): Promise<ForumThreadPageDto> => {
        const response = await this.forumControllerThreadsRaw({ page: page, steamId: steamId, perPage: perPage, threadType: threadType });
        return await response.value();
    }

    /**
     */
    forumControllerToggleReactionContext(requestParameters: ForumControllerToggleReactionRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/forum/message/{id}/react`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForumUpdateMessageReactionDtoToJSON(requestParameters.forumUpdateMessageReactionDto),
        };
    }

    /**
     */
    forumControllerToggleReaction = async (id: string, forumUpdateMessageReactionDto: ForumUpdateMessageReactionDto): Promise<ForumMessageDTO> => {
        const response = await this.forumControllerToggleReactionRaw({ id: id, forumUpdateMessageReactionDto: forumUpdateMessageReactionDto });
        return await response.value();
    }

    /**
     */
    forumControllerUpdateThreadContext(requestParameters: ForumControllerUpdateThreadRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/forum/thread/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ForumUpdateThreadDTOToJSON(requestParameters.forumUpdateThreadDTO),
        };
    }

    /**
     */
    forumControllerUpdateThread = async (id: string, forumUpdateThreadDTO: ForumUpdateThreadDTO): Promise<ForumThreadDTO> => {
        const response = await this.forumControllerUpdateThreadRaw({ id: id, forumUpdateThreadDTO: forumUpdateThreadDTO });
        return await response.value();
    }

    /**
     */
    forumControllerUpdateUserContext(requestParameters: ForumControllerUpdateUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/forum/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForumUpdateUserDTOToJSON(requestParameters.forumUpdateUserDTO),
        };
    }

    /**
     */
    forumControllerUpdateUser = async (id: string, forumUpdateUserDTO: ForumUpdateUserDTO): Promise<void> => {
        await this.forumControllerUpdateUserRaw({ id: id, forumUpdateUserDTO: forumUpdateUserDTO });
    }

    /**
     */
    private async forumControllerAllEmoticonsRaw(requestParameters: ForumControllerAllEmoticonsRequest): Promise<runtime.ApiResponse<Array<ForumEmoticonDto>>> {
        this.forumControllerAllEmoticonsValidation(requestParameters);
        const context = this.forumControllerAllEmoticonsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ForumEmoticonDtoFromJSON));
    }

    /**
     */
    private forumControllerAllEmoticonsValidation(requestParameters: ForumControllerAllEmoticonsRequest) {
    }

    /**
     */
    private async forumControllerDeleteMessageRaw(requestParameters: ForumControllerDeleteMessageRequest): Promise<runtime.ApiResponse<ForumMessageDTO>> {
        this.forumControllerDeleteMessageValidation(requestParameters);
        const context = this.forumControllerDeleteMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumMessageDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerDeleteMessageValidation(requestParameters: ForumControllerDeleteMessageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerDeleteMessage.');
        }
    }

    /**
     */
    private async forumControllerEditMessageRaw(requestParameters: ForumControllerEditMessageRequest): Promise<runtime.ApiResponse<ForumMessageDTO>> {
        this.forumControllerEditMessageValidation(requestParameters);
        const context = this.forumControllerEditMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumMessageDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerEditMessageValidation(requestParameters: ForumControllerEditMessageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerEditMessage.');
        }
        if (requestParameters.forumEditMessageDTO === null || requestParameters.forumEditMessageDTO === undefined) {
            throw new runtime.RequiredError('forumEditMessageDTO','Required parameter requestParameters.forumEditMessageDTO was null or undefined when calling forumControllerEditMessage.');
        }
    }

    /**
     */
    private async forumControllerGetLatestPageRaw(requestParameters: ForumControllerGetLatestPageRequest): Promise<runtime.ApiResponse<ForumMessagePageDTO>> {
        this.forumControllerGetLatestPageValidation(requestParameters);
        const context = this.forumControllerGetLatestPageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumMessagePageDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerGetLatestPageValidation(requestParameters: ForumControllerGetLatestPageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerGetLatestPage.');
        }
    }

    /**
     */
    private async forumControllerGetMessageRaw(requestParameters: ForumControllerGetMessageRequest): Promise<runtime.ApiResponse<ForumMessageDTO>> {
        this.forumControllerGetMessageValidation(requestParameters);
        const context = this.forumControllerGetMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumMessageDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerGetMessageValidation(requestParameters: ForumControllerGetMessageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerGetMessage.');
        }
    }

    /**
     */
    private async forumControllerGetThreadRaw(requestParameters: ForumControllerGetThreadRequest): Promise<runtime.ApiResponse<ForumThreadDTO>> {
        this.forumControllerGetThreadValidation(requestParameters);
        const context = this.forumControllerGetThreadContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumThreadDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerGetThreadValidation(requestParameters: ForumControllerGetThreadRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerGetThread.');
        }
    }

    /**
     */
    private async forumControllerGetThreadForKeyRaw(requestParameters: ForumControllerGetThreadForKeyRequest): Promise<runtime.ApiResponse<ForumThreadDTO>> {
        this.forumControllerGetThreadForKeyValidation(requestParameters);
        const context = this.forumControllerGetThreadForKeyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumThreadDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerGetThreadForKeyValidation(requestParameters: ForumControllerGetThreadForKeyRequest) {
        if (requestParameters.forumCreateThreadDTO === null || requestParameters.forumCreateThreadDTO === undefined) {
            throw new runtime.RequiredError('forumCreateThreadDTO','Required parameter requestParameters.forumCreateThreadDTO was null or undefined when calling forumControllerGetThreadForKey.');
        }
    }

    /**
     */
    private async forumControllerGetUserRaw(requestParameters: ForumControllerGetUserRequest): Promise<runtime.ApiResponse<ForumForumUserDTO>> {
        this.forumControllerGetUserValidation(requestParameters);
        const context = this.forumControllerGetUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumForumUserDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerGetUserValidation(requestParameters: ForumControllerGetUserRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerGetUser.');
        }
    }

    /**
     */
    private async forumControllerMessagesRaw(requestParameters: ForumControllerMessagesRequest): Promise<runtime.ApiResponse<Array<ForumMessageDTO>>> {
        this.forumControllerMessagesValidation(requestParameters);
        const context = this.forumControllerMessagesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ForumMessageDTOFromJSON));
    }

    /**
     */
    private forumControllerMessagesValidation(requestParameters: ForumControllerMessagesRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerMessages.');
        }
    }

    /**
     */
    private async forumControllerMessagesPageRaw(requestParameters: ForumControllerMessagesPageRequest): Promise<runtime.ApiResponse<ForumMessagePageDTO>> {
        this.forumControllerMessagesPageValidation(requestParameters);
        const context = this.forumControllerMessagesPageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumMessagePageDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerMessagesPageValidation(requestParameters: ForumControllerMessagesPageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerMessagesPage.');
        }
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling forumControllerMessagesPage.');
        }
    }

    /**
     */
    private async forumControllerPostMessageRaw(requestParameters: ForumControllerPostMessageRequest): Promise<runtime.ApiResponse<ForumMessageDTO>> {
        this.forumControllerPostMessageValidation(requestParameters);
        const context = this.forumControllerPostMessageContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumMessageDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerPostMessageValidation(requestParameters: ForumControllerPostMessageRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerPostMessage.');
        }
        if (requestParameters.forumCreateMessageDTO === null || requestParameters.forumCreateMessageDTO === undefined) {
            throw new runtime.RequiredError('forumCreateMessageDTO','Required parameter requestParameters.forumCreateMessageDTO was null or undefined when calling forumControllerPostMessage.');
        }
    }

    /**
     */
    private async forumControllerThreadsRaw(requestParameters: ForumControllerThreadsRequest): Promise<runtime.ApiResponse<ForumThreadPageDto>> {
        this.forumControllerThreadsValidation(requestParameters);
        const context = this.forumControllerThreadsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumThreadPageDtoFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerThreadsValidation(requestParameters: ForumControllerThreadsRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling forumControllerThreads.');
        }
    }

    /**
     */
    private async forumControllerToggleReactionRaw(requestParameters: ForumControllerToggleReactionRequest): Promise<runtime.ApiResponse<ForumMessageDTO>> {
        this.forumControllerToggleReactionValidation(requestParameters);
        const context = this.forumControllerToggleReactionContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumMessageDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerToggleReactionValidation(requestParameters: ForumControllerToggleReactionRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerToggleReaction.');
        }
        if (requestParameters.forumUpdateMessageReactionDto === null || requestParameters.forumUpdateMessageReactionDto === undefined) {
            throw new runtime.RequiredError('forumUpdateMessageReactionDto','Required parameter requestParameters.forumUpdateMessageReactionDto was null or undefined when calling forumControllerToggleReaction.');
        }
    }

    /**
     */
    private async forumControllerUpdateThreadRaw(requestParameters: ForumControllerUpdateThreadRequest): Promise<runtime.ApiResponse<ForumThreadDTO>> {
        this.forumControllerUpdateThreadValidation(requestParameters);
        const context = this.forumControllerUpdateThreadContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForumThreadDTOFromJSON(jsonValue));
    }

    /**
     */
    private forumControllerUpdateThreadValidation(requestParameters: ForumControllerUpdateThreadRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerUpdateThread.');
        }
        if (requestParameters.forumUpdateThreadDTO === null || requestParameters.forumUpdateThreadDTO === undefined) {
            throw new runtime.RequiredError('forumUpdateThreadDTO','Required parameter requestParameters.forumUpdateThreadDTO was null or undefined when calling forumControllerUpdateThread.');
        }
    }

    /**
     */
    private async forumControllerUpdateUserRaw(requestParameters: ForumControllerUpdateUserRequest): Promise<runtime.ApiResponse<void>> {
        this.forumControllerUpdateUserValidation(requestParameters);
        const context = this.forumControllerUpdateUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private forumControllerUpdateUserValidation(requestParameters: ForumControllerUpdateUserRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling forumControllerUpdateUser.');
        }
        if (requestParameters.forumUpdateUserDTO === null || requestParameters.forumUpdateUserDTO === undefined) {
            throw new runtime.RequiredError('forumUpdateUserDTO','Required parameter requestParameters.forumUpdateUserDTO was null or undefined when calling forumControllerUpdateUser.');
        }
    }

}
